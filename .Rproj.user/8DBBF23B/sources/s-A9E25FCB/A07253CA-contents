---
title: "QM 2020 Week 12 -- Wrap-Up"
author: "Marcel Neunhoeffer & Oliver Rittmann"
date: "December 16 & 17, 2020"
output:
  html_notebook:
    toc: true
    toc_float: true
    css: css/lab.css
  pdf_document:
    toc: yes
  html_document:
    toc: true
    toc_float: true
    css: css/lab.css
---

---

  
## Today:

1.  Simulation, Simulation... Visualizing Interaction Effects in non-linear models.
2.  Throwback Thursday/Monday/Tuesday
3.  How to Data Essay with R-Markdown.

## Goals for Today:

*  Get some more practice with simulations.
*  See what you learned this semester.

---


```{r setup}
# The first line sets an option for the final document that can be produced from
# the .Rmd file. Don't worry about it.
knitr::opts_chunk$set(echo = TRUE)

# The next bit is quite powerful and useful. 
# First you define which packages you need for your analysis and assign it to 
# the p_needed object. 
p_needed <-
  c("foreign", "viridis", "MASS", "optimx", "separationplot", "knitr")

# Now you check which packages are already installed on your computer.
# The function installed.packages() returns a vector with all the installed 
# packages.
packages <- rownames(installed.packages())
# Then you check which of the packages you need are not installed on your 
# computer yet. Essentially you compare the vector p_needed with the vector
# packages. The result of this comparison is assigned to p_to_install.
p_to_install <- p_needed[!(p_needed %in% packages)]
# If at least one element is in p_to_install you then install those missing
# packages.
if (length(p_to_install) > 0) {
  install.packages(p_to_install)
}
# Now that all packages are installed on the computer, you can load them for
# this project. Additionally the expression returns whether the packages were
# successfully loaded.
sapply(p_needed, require, character.only = TRUE)

# This is an option for stargazer tables
# It automatically adapts the output to html or latex,
# depending on whether we want a html or pdf file
stargazer_opt <- ifelse(knitr::is_latex_output(), "latex", "html")
```


# 1. Simulation, Simulation... Visualizing Interaction Effects in non-linear models

Unfortunately, the intuition about interaction terms form linear models does not extend to non-linear models.

However, we have one really powerful tool in our toolbox that can help us to look at and interpret interactions in any model. Simulation!

As some of you had problems with the interaction effect in a logit model in Homework 9, we will look at an interaction in a logit model here.

The same logic applies to any other non-linear model.

---

For the last time, we will start with some fake data.

```{r}
# Population Size

n <- 100000

# True Parameters

beta0 <- -2
beta1 <- 0.3
beta2 <- 0.5
beta3 <- -0.2

# Independent Variables

X1 <- rnorm(n, 20, 10)
X2 <- rnorm(n, 1, 0.5)

# Our Systematic component

mu <- beta0 + beta1 * X1 + beta2 * X2 + beta3 * X1 * X2

# Now we generate p via the logit response function

p <- (exp(mu)) / (1 + exp(mu))


# As we observe only 0 or 1 we need to put p in a binomial distribution

Y <- rbinom(n, 1, p)

# That's our full population.

pop <- data.frame(Y, X1, X2)

# Let's work with a sample from our population

data <- pop[sample(1:10000, 1000),]


# Now we can run the model...

m1 <-
  glm(Y ~ X1 + X2 + X1 * X2,
      data = data,
      family = binomial(link = logit))

summary(m1)
```

So now we can't make sense of these coefficients... 

# To see what those coefficients mean, we use simulation.

## A. Simulate Parameters - Remember the Steps?

Steps for Simulating Parameters:

* 1. Get the coefficients from the regression (`gamma_hat`).
* 2. Get the variance-covariance matrix (`V_hat`).
* 3. Set up a multivariate normal distribution `N(gamma_hat, V_hat)`-
* 4. Draw from the distribution `nsim` times.

```{r}
gamma_hat <- coef(m1)
V_hat <- vcov(m1)

S <- mvrnorm(1000, gamma_hat, V_hat)
```


## B. Calculate Expected Values

Set up interesting scenarios. That's the important step here!

We first have to define what we are interested in. Right now, we want to learn about **the effect of X1 conditional on X2**.

```{r}
X1_sim <- seq(min(X1), max(X1), length.out = 100)

X2_lo <- quantile(X2, 0.25)
X2_hi <- quantile(X2, 0.75)

scenario_X2lo <- cbind(1, X1_sim, X2_lo, X1_sim * X2_lo)
scenario_X2hi <- cbind(1, X1_sim, X2_hi, X1_sim * X2_hi)

Xbeta_lo <- S %*% t(scenario_X2lo)
Xbeta_hi <- S %*% t(scenario_X2hi)

dim(Xbeta_lo)
dim(Xbeta_hi)

# To get expected values for p, we need to plug in the Xbeta values into
# the response function to get simulatd probabilities

p_sim_lo <- (exp(Xbeta_lo)) / (1 + exp(Xbeta_lo))
p_sim_hi <- (exp(Xbeta_hi)) / (1 + exp(Xbeta_hi))

dim(p_sim_lo)
dim(p_sim_hi)


# Means and Quantiles

p_mean_lo <- apply(p_sim_lo, 2, mean)
p_qu_lo <- t(apply(p_sim_lo, 2, quantile, prob = c(0.025, 0.975)))

p_mean_hi <- apply(p_sim_hi, 2, mean)
p_qu_hi <- t(apply(p_sim_hi, 2, quantile, prob = c(0.025, 0.975)))

```
```{r}
## C. Plot

plot(
  x = X1_sim,
  y = p_mean_lo,
  type = "n",                             # this plot will be empty
  ylim = c(0, 1),                         # range of the y-axis
  ylab = "Probability of Y",              # label of the y-axis
  xlab = "X1",                            # label of the x-axis
  main = "Predicted Probabilities of Y",  # add caption
  font.main = 1,                          # if you want to "unbold" the caption
  cex.main = 1.2,                         # control caption font size
  bty = "n",                              # no box around the plot
  las = 1                                 # control rotation of  axis-labels
)

# plot the confidence intervals as polygons
polygon(
  x = c(rev(X1_sim), X1_sim),
  y = c(rev(p_qu_lo[, 2]), p_qu_lo[, 1]),
  col = viridis(2, alpha = 0.65)[1],
  border = NA
)

polygon(
  x = c(rev(X1_sim), X1_sim),
  y = c(rev(p_qu_hi[, 2]), p_qu_hi[, 1]),
  col = viridis(2, alpha = 0.65)[2],
  border = NA
)

# Add lines for the means
lines(x = X1_sim, 
      y = p_mean_lo, 
      lwd = 1)
lines(x = X1_sim, 
      y = p_mean_hi, 
      lwd = 1)


# Add a "histogram" of actual X1-values.
axis(
  1,
  at = X1,
  col.ticks = "gray30",
  labels = FALSE,
  tck = 0.02
) 

# We can also add a legend
legend(
  "topleft",                             # legend position
  legend = c("low X2",
             "high X2"),                 # legend annotation
  pch = 22,                              # symbols: squares
  pt.bg = viridis(2, 0.65),              # color of the square filling
  col = viridis(2, 0),                   # color of the square bounds
  pt.cex = 2,                            # size of the squares
  cex = 0.8,                             # size of the legend
  bty = "n"
)
```



How about looking at the first difference of the two scenarios directly?

```{r}
# calculate the first difference
fd <- p_sim_lo - p_sim_hi

# calculate means and quantiles
fd_mean <- apply(fd, 2, mean)
fd_qu <- t(apply(fd, 2, quantile, prob = c(0.025, 0.975)))
```


```{r}
# plot the first difference
plot(
  X1_sim,
  fd_mean,
  type = "n",
  ylim = c(-1, 1),
  ylab = "Difference in predicted probabilities",
  xlab = "X1",
  main = "First Difference of Predicted Probabilities of Y",
  font.main = 1, 
  cex.main = 1.2,
  bty = "n",
  las = 1
)

# plot the confidence intervals as polygons
polygon(
  x = c(rev(X1_sim), X1_sim),
  y = c(rev(fd_qu[, 2]), fd_qu[, 1]),
  col = viridis(1, alpha = 0.65),
  border = NA
)

# We add a horizontal line at y = 0
abline(h = 0)

# Add lines for the means
lines(x = X1_sim,
      y = fd_mean, 
      lwd = 1)

# Add a "histogram" of actual X1-values.
axis(
  1,
  at = X1,
  col.ticks = "gray30",
  labels = FALSE,
  tck = 0.02
) 
```

That looks funky (and not linear at all...).


### 3. Throwback Thursday/Monday/Tuesday

This is where you all started: 

```{r Exercise I}

# We first create the objects

my_lucky_number <- 23

my_firstname <- "Oliver"

my_lastname <- "Rittmann"

# Now we want to call the objects

my_lucky_number
my_firstname
my_lastname

```

Remember your first homework?

![Homework 1.1.](figures/hw1_1.png)

![Homework 1.2.](figures/hw1_2.png)


It took quite some time back then...

How long do you think would it take you now? 

It's really amazing what you learned this semester.

So we think you are well prepared to master the Data Essay! 

![Data Essay Marking](figures/DE.png)


## THE END.

Good luck with the Data Essay! We are here for you during our office hours next Monday, if you have any questions!